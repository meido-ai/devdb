// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package api

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

// Defines values for DatabaseStatus.
const (
	Creating DatabaseStatus = "creating"
	Error    DatabaseStatus = "error"
	Running  DatabaseStatus = "running"
	Stopped  DatabaseStatus = "stopped"
)

// Defines values for DatabaseType.
const (
	Postgres DatabaseType = "postgres"
)

// CreateDatabaseRequest defines model for CreateDatabaseRequest.
type CreateDatabaseRequest struct {
	// Name Name of the database instance
	Name string `json:"name"`
}

// CreateProjectRequest defines model for CreateProjectRequest.
type CreateProjectRequest struct {
	// BackupLocation S3 URL of the backup file (e.g., s3://bucket/path/to/backup.dump)
	BackupLocation *string      `json:"backupLocation,omitempty"`
	DbType         DatabaseType `json:"dbType"`

	// DbVersion Version of the database (e.g., '15.3' for PostgreSQL)
	DbVersion string `json:"dbVersion"`

	// Name Name of the project
	Name string `json:"name"`

	// Owner Owner of the project
	Owner string `json:"owner"`
}

// Database defines model for Database.
type Database struct {
	Database *string        `json:"database,omitempty"`
	Host     *string        `json:"host,omitempty"`
	Name     string         `json:"name"`
	Port     *int           `json:"port,omitempty"`
	Project  *string        `json:"project,omitempty"`
	Status   DatabaseStatus `json:"status"`
	Username *string        `json:"username,omitempty"`
}

// DatabaseStatus defines model for Database.Status.
type DatabaseStatus string

// DatabaseType defines model for DatabaseType.
type DatabaseType string

// DefaultDatabaseCredentials defines model for DefaultDatabaseCredentials.
type DefaultDatabaseCredentials struct {
	// Database Default database name
	Database string `json:"database"`

	// Password Default password for database access
	Password string `json:"password"`

	// Username Default username for database access
	Username string `json:"username"`
}

// Project defines model for Project.
type Project struct {
	// BackupLocation S3 URL where the database backup (pg_dump output) is stored
	BackupLocation     string                     `json:"backupLocation"`
	Databases          *[]Database                `json:"databases,omitempty"`
	DbType             DatabaseType               `json:"dbType"`
	DbVersion          string                     `json:"dbVersion"`
	DefaultCredentials DefaultDatabaseCredentials `json:"defaultCredentials"`
	Id                 string                     `json:"id"`
	Name               string                     `json:"name"`
	Owner              string                     `json:"owner"`
}

// GetProjectsParams defines parameters for GetProjects.
type GetProjectsParams struct {
	Owner *string `form:"owner,omitempty" json:"owner,omitempty"`
}

// PostProjectsJSONRequestBody defines body for PostProjects for application/json ContentType.
type PostProjectsJSONRequestBody = CreateProjectRequest

// PostProjectsProjectIdDatabasesJSONRequestBody defines body for PostProjectsProjectIdDatabases for application/json ContentType.
type PostProjectsProjectIdDatabasesJSONRequestBody = CreateDatabaseRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetProjects request
	GetProjects(ctx context.Context, params *GetProjectsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostProjectsWithBody request with any body
	PostProjectsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostProjects(ctx context.Context, body PostProjectsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteProject request
	DeleteProject(ctx context.Context, projectId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProjectsProjectIdDatabases request
	GetProjectsProjectIdDatabases(ctx context.Context, projectId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostProjectsProjectIdDatabasesWithBody request with any body
	PostProjectsProjectIdDatabasesWithBody(ctx context.Context, projectId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostProjectsProjectIdDatabases(ctx context.Context, projectId string, body PostProjectsProjectIdDatabasesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteProjectsProjectIdDatabasesName request
	DeleteProjectsProjectIdDatabasesName(ctx context.Context, projectId string, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProjectsProjectIdDatabasesName request
	GetProjectsProjectIdDatabasesName(ctx context.Context, projectId string, name string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetProjects(ctx context.Context, params *GetProjectsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProjectsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostProjectsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostProjectsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostProjects(ctx context.Context, body PostProjectsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostProjectsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteProject(ctx context.Context, projectId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteProjectRequest(c.Server, projectId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProjectsProjectIdDatabases(ctx context.Context, projectId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProjectsProjectIdDatabasesRequest(c.Server, projectId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostProjectsProjectIdDatabasesWithBody(ctx context.Context, projectId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostProjectsProjectIdDatabasesRequestWithBody(c.Server, projectId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostProjectsProjectIdDatabases(ctx context.Context, projectId string, body PostProjectsProjectIdDatabasesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostProjectsProjectIdDatabasesRequest(c.Server, projectId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteProjectsProjectIdDatabasesName(ctx context.Context, projectId string, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteProjectsProjectIdDatabasesNameRequest(c.Server, projectId, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProjectsProjectIdDatabasesName(ctx context.Context, projectId string, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProjectsProjectIdDatabasesNameRequest(c.Server, projectId, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetProjectsRequest generates requests for GetProjects
func NewGetProjectsRequest(server string, params *GetProjectsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Owner != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "owner", runtime.ParamLocationQuery, *params.Owner); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostProjectsRequest calls the generic PostProjects builder with application/json body
func NewPostProjectsRequest(server string, body PostProjectsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostProjectsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostProjectsRequestWithBody generates requests for PostProjects with any type of body
func NewPostProjectsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteProjectRequest generates requests for DeleteProject
func NewDeleteProjectRequest(server string, projectId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProjectsProjectIdDatabasesRequest generates requests for GetProjectsProjectIdDatabases
func NewGetProjectsProjectIdDatabasesRequest(server string, projectId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/%s/databases", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostProjectsProjectIdDatabasesRequest calls the generic PostProjectsProjectIdDatabases builder with application/json body
func NewPostProjectsProjectIdDatabasesRequest(server string, projectId string, body PostProjectsProjectIdDatabasesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostProjectsProjectIdDatabasesRequestWithBody(server, projectId, "application/json", bodyReader)
}

// NewPostProjectsProjectIdDatabasesRequestWithBody generates requests for PostProjectsProjectIdDatabases with any type of body
func NewPostProjectsProjectIdDatabasesRequestWithBody(server string, projectId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/%s/databases", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteProjectsProjectIdDatabasesNameRequest generates requests for DeleteProjectsProjectIdDatabasesName
func NewDeleteProjectsProjectIdDatabasesNameRequest(server string, projectId string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/%s/databases/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProjectsProjectIdDatabasesNameRequest generates requests for GetProjectsProjectIdDatabasesName
func NewGetProjectsProjectIdDatabasesNameRequest(server string, projectId string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/%s/databases/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetProjectsWithResponse request
	GetProjectsWithResponse(ctx context.Context, params *GetProjectsParams, reqEditors ...RequestEditorFn) (*GetProjectsResponse, error)

	// PostProjectsWithBodyWithResponse request with any body
	PostProjectsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostProjectsResponse, error)

	PostProjectsWithResponse(ctx context.Context, body PostProjectsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostProjectsResponse, error)

	// DeleteProjectWithResponse request
	DeleteProjectWithResponse(ctx context.Context, projectId string, reqEditors ...RequestEditorFn) (*DeleteProjectResponse, error)

	// GetProjectsProjectIdDatabasesWithResponse request
	GetProjectsProjectIdDatabasesWithResponse(ctx context.Context, projectId string, reqEditors ...RequestEditorFn) (*GetProjectsProjectIdDatabasesResponse, error)

	// PostProjectsProjectIdDatabasesWithBodyWithResponse request with any body
	PostProjectsProjectIdDatabasesWithBodyWithResponse(ctx context.Context, projectId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostProjectsProjectIdDatabasesResponse, error)

	PostProjectsProjectIdDatabasesWithResponse(ctx context.Context, projectId string, body PostProjectsProjectIdDatabasesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostProjectsProjectIdDatabasesResponse, error)

	// DeleteProjectsProjectIdDatabasesNameWithResponse request
	DeleteProjectsProjectIdDatabasesNameWithResponse(ctx context.Context, projectId string, name string, reqEditors ...RequestEditorFn) (*DeleteProjectsProjectIdDatabasesNameResponse, error)

	// GetProjectsProjectIdDatabasesNameWithResponse request
	GetProjectsProjectIdDatabasesNameWithResponse(ctx context.Context, projectId string, name string, reqEditors ...RequestEditorFn) (*GetProjectsProjectIdDatabasesNameResponse, error)
}

type GetProjectsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Project
}

// Status returns HTTPResponse.Status
func (r GetProjectsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProjectsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostProjectsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Project
}

// Status returns HTTPResponse.Status
func (r PostProjectsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostProjectsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteProjectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteProjectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteProjectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProjectsProjectIdDatabasesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Database
}

// Status returns HTTPResponse.Status
func (r GetProjectsProjectIdDatabasesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProjectsProjectIdDatabasesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostProjectsProjectIdDatabasesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Database
}

// Status returns HTTPResponse.Status
func (r PostProjectsProjectIdDatabasesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostProjectsProjectIdDatabasesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteProjectsProjectIdDatabasesNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteProjectsProjectIdDatabasesNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteProjectsProjectIdDatabasesNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProjectsProjectIdDatabasesNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Database
}

// Status returns HTTPResponse.Status
func (r GetProjectsProjectIdDatabasesNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProjectsProjectIdDatabasesNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetProjectsWithResponse request returning *GetProjectsResponse
func (c *ClientWithResponses) GetProjectsWithResponse(ctx context.Context, params *GetProjectsParams, reqEditors ...RequestEditorFn) (*GetProjectsResponse, error) {
	rsp, err := c.GetProjects(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProjectsResponse(rsp)
}

// PostProjectsWithBodyWithResponse request with arbitrary body returning *PostProjectsResponse
func (c *ClientWithResponses) PostProjectsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostProjectsResponse, error) {
	rsp, err := c.PostProjectsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostProjectsResponse(rsp)
}

func (c *ClientWithResponses) PostProjectsWithResponse(ctx context.Context, body PostProjectsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostProjectsResponse, error) {
	rsp, err := c.PostProjects(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostProjectsResponse(rsp)
}

// DeleteProjectWithResponse request returning *DeleteProjectResponse
func (c *ClientWithResponses) DeleteProjectWithResponse(ctx context.Context, projectId string, reqEditors ...RequestEditorFn) (*DeleteProjectResponse, error) {
	rsp, err := c.DeleteProject(ctx, projectId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteProjectResponse(rsp)
}

// GetProjectsProjectIdDatabasesWithResponse request returning *GetProjectsProjectIdDatabasesResponse
func (c *ClientWithResponses) GetProjectsProjectIdDatabasesWithResponse(ctx context.Context, projectId string, reqEditors ...RequestEditorFn) (*GetProjectsProjectIdDatabasesResponse, error) {
	rsp, err := c.GetProjectsProjectIdDatabases(ctx, projectId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProjectsProjectIdDatabasesResponse(rsp)
}

// PostProjectsProjectIdDatabasesWithBodyWithResponse request with arbitrary body returning *PostProjectsProjectIdDatabasesResponse
func (c *ClientWithResponses) PostProjectsProjectIdDatabasesWithBodyWithResponse(ctx context.Context, projectId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostProjectsProjectIdDatabasesResponse, error) {
	rsp, err := c.PostProjectsProjectIdDatabasesWithBody(ctx, projectId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostProjectsProjectIdDatabasesResponse(rsp)
}

func (c *ClientWithResponses) PostProjectsProjectIdDatabasesWithResponse(ctx context.Context, projectId string, body PostProjectsProjectIdDatabasesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostProjectsProjectIdDatabasesResponse, error) {
	rsp, err := c.PostProjectsProjectIdDatabases(ctx, projectId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostProjectsProjectIdDatabasesResponse(rsp)
}

// DeleteProjectsProjectIdDatabasesNameWithResponse request returning *DeleteProjectsProjectIdDatabasesNameResponse
func (c *ClientWithResponses) DeleteProjectsProjectIdDatabasesNameWithResponse(ctx context.Context, projectId string, name string, reqEditors ...RequestEditorFn) (*DeleteProjectsProjectIdDatabasesNameResponse, error) {
	rsp, err := c.DeleteProjectsProjectIdDatabasesName(ctx, projectId, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteProjectsProjectIdDatabasesNameResponse(rsp)
}

// GetProjectsProjectIdDatabasesNameWithResponse request returning *GetProjectsProjectIdDatabasesNameResponse
func (c *ClientWithResponses) GetProjectsProjectIdDatabasesNameWithResponse(ctx context.Context, projectId string, name string, reqEditors ...RequestEditorFn) (*GetProjectsProjectIdDatabasesNameResponse, error) {
	rsp, err := c.GetProjectsProjectIdDatabasesName(ctx, projectId, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProjectsProjectIdDatabasesNameResponse(rsp)
}

// ParseGetProjectsResponse parses an HTTP response from a GetProjectsWithResponse call
func ParseGetProjectsResponse(rsp *http.Response) (*GetProjectsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProjectsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Project
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostProjectsResponse parses an HTTP response from a PostProjectsWithResponse call
func ParsePostProjectsResponse(rsp *http.Response) (*PostProjectsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostProjectsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Project
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteProjectResponse parses an HTTP response from a DeleteProjectWithResponse call
func ParseDeleteProjectResponse(rsp *http.Response) (*DeleteProjectResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteProjectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetProjectsProjectIdDatabasesResponse parses an HTTP response from a GetProjectsProjectIdDatabasesWithResponse call
func ParseGetProjectsProjectIdDatabasesResponse(rsp *http.Response) (*GetProjectsProjectIdDatabasesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProjectsProjectIdDatabasesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Database
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostProjectsProjectIdDatabasesResponse parses an HTTP response from a PostProjectsProjectIdDatabasesWithResponse call
func ParsePostProjectsProjectIdDatabasesResponse(rsp *http.Response) (*PostProjectsProjectIdDatabasesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostProjectsProjectIdDatabasesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Database
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteProjectsProjectIdDatabasesNameResponse parses an HTTP response from a DeleteProjectsProjectIdDatabasesNameWithResponse call
func ParseDeleteProjectsProjectIdDatabasesNameResponse(rsp *http.Response) (*DeleteProjectsProjectIdDatabasesNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteProjectsProjectIdDatabasesNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetProjectsProjectIdDatabasesNameResponse parses an HTTP response from a GetProjectsProjectIdDatabasesNameWithResponse call
func ParseGetProjectsProjectIdDatabasesNameResponse(rsp *http.Response) (*GetProjectsProjectIdDatabasesNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProjectsProjectIdDatabasesNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Database
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

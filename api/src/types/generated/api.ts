/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/projects": {
    /** List projects */
    get: {
      parameters: {
        query?: {
          owner?: string;
        };
      };
      responses: {
        /** @description List of projects */
        200: {
          content: {
            "application/json": components["schemas"]["Project"][];
          };
        };
      };
    };
    /** Create a new project */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["CreateProjectRequest"];
        };
      };
      responses: {
        /** @description Project created */
        201: {
          content: {
            "application/json": components["schemas"]["Project"];
          };
        };
      };
    };
  };
  "/projects/{name}": {
    /** Delete a project */
    delete: operations["deleteProjectsName"];
  };
  "/databases": {
    /** List databases */
    get: {
      responses: {
        /** @description List of databases */
        200: {
          content: {
            "application/json": components["schemas"]["Database"][];
          };
        };
      };
    };
    /** Create a new database */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["CreateDatabaseRequest"];
        };
      };
      responses: {
        /** @description Database created */
        201: {
          content: {
            "application/json": components["schemas"]["Database"];
          };
        };
      };
    };
  };
  "/databases/{name}": {
    /** Delete a database */
    delete: {
      parameters: {
        path: {
          name: string;
        };
      };
      responses: {
        /** @description Database deleted */
        200: {
          content: {
            "application/json": {
              message?: string;
            };
          };
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** @enum {string} */
    DatabaseType: "postgres" | "mysql";
    DatabaseCredentials: {
      username: string;
      password?: string;
      database: string;
    };
    DatabaseConnection: {
      host: string;
      port: number;
      username: string;
      password?: string;
      database: string;
      useIAMAuth?: boolean;
      vpcEndpoint?: string;
    };
    Database: {
      name: string;
      /** @enum {string} */
      status: "creating" | "running" | "stopped" | "error";
      project?: string;
      host?: string;
      port?: number;
      username?: string;
      database?: string;
    };
    CreateDatabaseRequest: {
      name: string;
      dbType: components["schemas"]["DatabaseType"];
      dbVersion: string;
      credentials: components["schemas"]["DatabaseCredentials"];
    };
    CreateProjectRequest: {
      /** @description Owner of the project */
      owner: string;
      /** @description Name of the project */
      name: string;
      /** @description Type of database (postgres or mysql) */
      dbType: components["schemas"]["DatabaseType"];
      /** @description Version of the database (e.g., '15.3' for PostgreSQL) */
      dbVersion: string;
      /** @description S3 URL where the database backup (pg_dump output) is stored. Required before creating first database container. */
      backupLocation?: string;
    };
    DefaultDatabaseCredentials: {
      /** @description Default username for database access */
      username: string;
      /** @description Default password for database access */
      password: string;
      /** @description Default database name */
      database: string;
    };
    Project: {
      id: string;
      owner: string;
      name: string;
      dbType: components["schemas"]["DatabaseType"];
      dbVersion: string;
      /** @description S3 URL where the database backup (pg_dump output) is stored */
      backupLocation: string;
      databases?: components["schemas"]["Database"][];
      defaultCredentials: components["schemas"]["DefaultDatabaseCredentials"];
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /** Delete a project */
  deleteProjectsName: {
    parameters: {
      path: {
        name: string;
      };
    };
    responses: {
      /** @description Project deleted successfully */
      200: {
        content: never;
      };
      /** @description Project not found */
      404: {
        content: never;
      };
    };
  };
}

name: Build and Push API Image
on:
  push:
    branches:
      - main
    paths:
      - api/**
      - '.github/workflows/build-and-push-devdb-api.yml'
  workflow_dispatch:

jobs:
  build-node-app:
    runs-on: ubuntu-latest
    outputs:
      version_tag: ${{ steps.generate-version.outputs.version_tag }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - id: generate-version
      name: "Generate Version"
      uses: paulhatch/semantic-version@v5.4.0
      with:
        tag_prefix: "v"
        major_pattern: "(MAJOR)"
        minor_pattern: "(MINOR)"
        version_format: "${major}.${minor}.${patch}"
        bump_each_commit: false

  build-container-image:
    runs-on: ubuntu-latest
    needs: build-node-app
    permissions:
      contents: write
      packages: write
      issues: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
      
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Create tag
      uses: rickstaa/action-create-tag@v1.7.2
      with:
        tag: ${{ needs.build-node-app.outputs.version_tag }}
 
    - name: Build and push Dev DB API image
      uses: docker/build-push-action@v5
      with:
        context: ./api
        push: true
        tags: |
          ghcr.io/${{ github.repository_owner }}/devdb-api:${{ needs.build-node-app.outputs.version_tag }}
          ghcr.io/${{ github.repository_owner }}/devdb-api:latest
        labels: |
          org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
          org.opencontainers.image.revision=${{ github.sha }}
          org.opencontainers.image.version=${{ needs.build-node-app.outputs.version_tag }}
          org.opencontainers.image.licenses=MIT

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      continue-on-error: true
      id: scan
      with:
        image-ref: ghcr.io/${{ github.repository_owner }}/devdb-api:${{ needs.build-node-app.outputs.version_tag }}
        format: 'json'
        output: 'trivy-results.json'
        exit-code: '0'
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH'

    - name: Create Security Issues
      continue-on-error: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "Starting security issue creation process..."
        
        # First, get existing Dependabot alerts
        echo "Fetching existing Dependabot alerts..."
        ALERTS=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/repos/${{ github.repository }}/security/alerts")
        
        ALERT_COUNT=$(echo "$ALERTS" | jq 'length')
        echo "Found $ALERT_COUNT existing Dependabot alerts"
        
        # Function to check if vulnerability already exists in Dependabot alerts
        check_existing_alert() {
          local package="$1"
          local version="$2"
          echo "Checking for existing alert: $package@$version"
          echo "$ALERTS" | jq -e --arg pkg "$package" \
            '.[] | select(.securityVulnerability.package.name == $pkg)' > /dev/null
        }
        
        echo "Processing Trivy scan results..."
        VULN_COUNT=$(jq '.Results[].Vulnerabilities | length // 0' trivy-results.json | jq -s 'add')
        echo "Found $VULN_COUNT vulnerabilities in Trivy results"
        
        # Process Trivy results
        CREATED_ISSUES=0
        SKIPPED_ISSUES=0
        
        jq -c '.Results[] | select(.Vulnerabilities != null) | .Vulnerabilities[]' trivy-results.json | while read -r vuln; do
          PKG_NAME=$(echo "$vuln" | jq -r '.PkgName')
          VERSION=$(echo "$vuln" | jq -r '.InstalledVersion')
          SEVERITY=$(echo "$vuln" | jq -r '.Severity')
          FIXED_VERSION=$(echo "$vuln" | jq -r '.FixedVersion // "Not available"')
          DESCRIPTION=$(echo "$vuln" | jq -r '.Description')
          REFERENCES=$(echo "$vuln" | jq -r '.References | map("* " + .) | join("\n")')
          
          echo "Processing vulnerability: $PKG_NAME@$VERSION ($SEVERITY)"
          
          # Only create issue if no Dependabot alert exists
          if ! check_existing_alert "$PKG_NAME" "$VERSION"; then
            echo "Creating new issue for $PKG_NAME@$VERSION..."
            
            # Create the body with proper escaping
            BODY=$(echo -e "**Package:** ${PKG_NAME}\n\n**Current Version:** ${VERSION}\n\n**Fixed Version:** ${FIXED_VERSION}\n\n**Severity:** ${SEVERITY}\n\n**Description:**\n${DESCRIPTION}\n\n**References:**\n${REFERENCES}")
            
            gh issue create \
              --title "Security: ${PKG_NAME} ${VERSION} has ${SEVERITY} vulnerability" \
              --body "$BODY" \
              --label security
              
            CREATED_ISSUES=$((CREATED_ISSUES + 1))
            echo "Created issue for $PKG_NAME"
          else
            SKIPPED_ISSUES=$((SKIPPED_ISSUES + 1))
            echo "Skipping $PKG_NAME - Dependabot alert already exists"
          fi
        done
        
        echo "Security issue creation complete!"
        echo "Summary:"
        echo "- Total vulnerabilities found: $VULN_COUNT"
        echo "- Existing Dependabot alerts: $ALERT_COUNT"
        echo "- New issues created: $CREATED_ISSUES"
        echo "- Skipped (existing alerts): $SKIPPED_ISSUES"

  create-release:
    runs-on: ubuntu-latest
    needs: [build-node-app, build-container-image]
    permissions:
      contents: write

    steps:
    - name: Create a GitHub release
      uses: actions/github-script@v7.0.1
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          await github.request(`POST /repos/${{ github.repository }}/releases`, {
            tag_name: "${{ needs.build-node-app.outputs.version_tag }}",
            name: "${{ needs.build-node-app.outputs.version_tag }}",
            generate_release_notes: true
          });

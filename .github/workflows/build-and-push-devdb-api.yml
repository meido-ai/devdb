name: Build and Push API Image
on:
  push:
    branches:
      - main
    paths:
      - api/**
jobs:
  build-node-app:
    runs-on: ubuntu-latest
    outputs:
      version_tag: ${{ steps.generate-version.outputs.version_tag }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - id: generate-version
      name: "Generate Version"
      uses: paulhatch/semantic-version@v5.4.0
      with:
        # The prefix to use to identify tags
        tag_prefix: "v"
        # A string which, if present in a git commit, indicates that a change represents a
        # major (breaking) change, supports regular expressions wrapped with '/'
        major_pattern: "(MAJOR)"
        # Same as above except indicating a minor change, supports regular expressions wrapped with '/'
        minor_pattern: "(MINOR)"
        # A string to determine the format of the version output
        version_format: "${major}.${minor}.${patch}"
        # If this is set to true, *every* commit will be treated as a new version.
        bump_each_commit: false

    - name: Install Doppler CLI
      id: install-doppler
      uses: pvcy/install-doppler@v1.3
    
    - name: Create environment file
      env:
        DOPPLER_TOKEN: ${{ secrets.DOPPLER_DEVDB_PRD }}
        DOPPLER_PROJECT: devdb
        DOPPLER_CONFIG: prd
      run: |
        cd ./api
        touch .env
        echo POSTGRES_IMAGE=$(doppler secrets get POSTGRES_IMAGE --plain) >> .env
        echo POSTGRES_DB=$(doppler secrets get POSTGRES_DB --plain) >> .env
        echo POSTGRES_USER=$(doppler secrets get POSTGRES_USER --plain) >> .env
        echo POSTGRES_PASSWORD=$(doppler secrets get POSTGRES_PASSWORD --plain) >> .env
        echo RESTORE_FROM_BACKUP=True >> .env
        echo RELEASE_VERSION=${{ steps.generate-version.outputs.version_tag }} >> .env

        cat .env

    - name: Ensure environment variables are set
      run: |
        cd ./api
        source .env
        if [[ -z "$POSTGRES_IMAGE" ]]; then
          echo "POSTGRES_IMAGE is not set"
          exit 1
        fi
        if [[ -z "$POSTGRES_DB" ]]; then
          echo "POSTGRES_DB is not set"
          exit 1
        fi
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 18

    - uses: actions/cache@v4
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: ${{ runner.os }}-node-

    - name: Install dependencies
      run: |
        cd ./api
        npm ci

    - name: Compile TypeScript
      run: |
        cd ./api
        npm run build

    - name: Save build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: |
          ./api/.env
          ./api/dist
          ./api/node_modules
          ./api/package*.json

  build-container-image:
    runs-on: ubuntu-latest
    needs: build-node-app

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
        path: ./api

    - name: Double check environment file
      run: |
        cd ./api
        cat .env
        
    - name: Install Doppler CLI
      id: install-doppler
      uses: pvcy/install-doppler@v1.3
      
    - name: Get AWS Creds from Doppler
      id: set-aws-creds
      env:
        DOPPLER_TOKEN: ${{ secrets.DOPPLER_AWS_DEV }}
        DOPPLER_PROJECT: aws
        DOPPLER_CONFIG: dev
      run: |
        echo "aws-access-key-id=$(doppler secrets get GH_ACTIONS_UPLOAD_ECR_ACCESS_KEY_ID --plain)" >> $GITHUB_OUTPUT
        echo "aws-secret-access-key=$(doppler secrets get GH_ACTIONS_UPLOAD_ECR_SECRET_ACCESS_KEY --plain)" >> $GITHUB_OUTPUT

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ steps.set-aws-creds.outputs.aws-access-key-id }}
        aws-secret-access-key: ${{ steps.set-aws-creds.outputs.aws-secret-access-key }}
        aws-region: us-west-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Create tag
      uses: rickstaa/action-create-tag@v1.7.2
      with:
        tag: ${{ needs.build-node-app.outputs.version_tag }}
 
    - name: Build, tag, and push Dev DB API image to Amazon ECR
      env:
        ECR_REGISTRY: "827076270689.dkr.ecr.us-west-1.amazonaws.com/database-migration-anonymized"
        ECR_REPOSITORY: devdb-api
        IMAGE_TAG: ${{ needs.build-node-app.outputs.version_tag }}
        SET_LATEST: true
      working-directory: api
      # The AWS ECR commands are used to add the "latest" tag to this image, which results in it being removed from an
      # existing image (if such an image exists)
      run: |
        docker buildx build -f Dockerfile -t "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" --push .
        if [ $SET_LATEST = "true" ];then
          MANIFEST=$(aws ecr batch-get-image --repository-name database-migration-anonymized/devdb-api --image-ids imageTag=$IMAGE_TAG --query 'images[].imageManifest' --output text)
          aws ecr put-image --repository-name database-migration-anonymized/devdb-api --image-tag latest --image-manifest "$MANIFEST"
        fi
      shell: bash

    - name: Create a GitHub release
      uses: actions/github-script@v7.0.1
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          await github.request(`POST /repos/${{ github.repository }}/releases`, {
            tag_name: "${{ needs.build-node-app.outputs.version_tag }}",
            name: "${{ needs.build-node-app.outputs.version_tag }}",
            generate_release_notes: false
          });

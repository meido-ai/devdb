name: Build and Push API Image
on:
  push:
    branches:
      - main
    paths:
      - api/**
  workflow_dispatch:

jobs:
  build-node-app:
    runs-on: ubuntu-latest
    outputs:
      version_tag: ${{ steps.generate-version.outputs.version_tag }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - id: generate-version
      name: "Generate Version"
      uses: paulhatch/semantic-version@v5.4.0
      with:
        # The prefix to use to identify tags
        tag_prefix: "v"
        # A string which, if present in a git commit, indicates that a change represents a
        # major (breaking) change, supports regular expressions wrapped with '/'
        major_pattern: "(MAJOR)"
        # Same as above except indicating a minor change, supports regular expressions wrapped with '/'
        minor_pattern: "(MINOR)"
        # A string to determine the format of the version output
        version_format: "${major}.${minor}.${patch}"
        # If this is set to true, *every* commit will be treated as a new version.
        bump_each_commit: false

  build-container-image:
    runs-on: ubuntu-latest
    needs: build-node-app
    permissions:
      contents: write
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
      
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Create tag
      uses: rickstaa/action-create-tag@v1.7.2
      with:
        tag: ${{ needs.build-node-app.outputs.version_tag }}
 
    - name: Build and push Dev DB API image
      uses: docker/build-push-action@v5
      with:
        context: ./api
        push: true
        tags: |
          ghcr.io/${{ github.repository_owner }}/devdb-api:${{ needs.build-node-app.outputs.version_tag }}
          ghcr.io/${{ github.repository_owner }}/devdb-api:latest
        labels: |
          org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
          org.opencontainers.image.revision=${{ github.sha }}
          org.opencontainers.image.version=${{ needs.build-node-app.outputs.version_tag }}
          org.opencontainers.image.licenses=MIT

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ghcr.io/${{ github.repository_owner }}/devdb-api:${{ needs.build-node-app.outputs.version_tag }}
        format: 'table'
        exit-code: '1'
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH'

  create-release:
    runs-on: ubuntu-latest
    needs: [build-node-app, build-container-image]
    permissions:
      contents: write

    steps:
    - name: Create a GitHub release
      uses: actions/github-script@v7.0.1
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          await github.request(`POST /repos/${{ github.repository }}/releases`, {
            tag_name: "${{ needs.build-node-app.outputs.version_tag }}",
            name: "${{ needs.build-node-app.outputs.version_tag }}",
            generate_release_notes: false
          });

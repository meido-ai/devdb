name: Release CLI

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write
  issues: write
  pull-requests: write

jobs:
  goreleaser:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'
          cache: true

      - name: Import GPG key
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GPG_FINGERPRINT: ${{ steps.import_gpg.outputs.fingerprint }}

      - name: Verify Release Assets
        run: |
          # Wait for GitHub API to register the release
          sleep 10
          
          # Get the release ID
          RELEASE_ID=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ github.ref_name }}" \
            | jq -r .id)
          
          # Get all assets
          ASSETS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID/assets")
          
          # Check for Windows binary
          WINDOWS_ASSET=$(echo "$ASSETS" | jq -r '.[] | select(.name | contains("Windows_x86_64.zip"))')
          if [ -z "$WINDOWS_ASSET" ]; then
            echo " Error: Windows binary not found in release assets"
            exit 1
          fi
          echo " Windows binary found"
          
          # Check for Mac Intel binary
          MAC_AMD64_ASSET=$(echo "$ASSETS" | jq -r '.[] | select(.name | contains("Darwin_x86_64"))')
          if [ -z "$MAC_AMD64_ASSET" ]; then
            echo " Error: Mac Intel (x86_64) binary not found in release assets"
            exit 1
          fi
          echo " Mac Intel binary found"
          
          # Check for Mac Apple Silicon binary
          MAC_ARM64_ASSET=$(echo "$ASSETS" | jq -r '.[] | select(.name | contains("Darwin_arm64"))')
          if [ -z "$MAC_ARM64_ASSET" ]; then
            echo " Error: Mac Apple Silicon (arm64) binary not found in release assets"
            exit 1
          fi
          echo " Mac Apple Silicon binary found"
          
          echo " All release assets verified successfully"
